apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: healthcare-backend-rollout
  namespace: healthcare
  labels:
    app: healthcare-backend
spec:
  replicas: 3
  strategy:
    canary:
      steps:
      - setWeight: 10
      - pause: { duration: 1m }
      - setWeight: 20
      - pause: { duration: 1m }
      - setWeight: 50
      - pause: { duration: 2m }
      - setWeight: 80
      - pause: { duration: 2m }
      canaryService: healthcare-backend-canary
      stableService: healthcare-backend-stable
      trafficRouting:
        nginx:
          stableIngress: healthcare-backend-stable
          additionalIngressAnnotations:
            canary-by-header: "X-Canary"
            canary-by-header-value: "true"
      analysis:
        templates:
        - templateName: success-rate
        args:
        - name: service-name
          value: healthcare-backend-canary
        startingStep: 2
        successfulJobHistoryLimit: 3
        unsuccessfulJobHistoryLimit: 3
      rollbackWindow:
        revisionHistoryLimit: 5
      progressDeadlineSeconds: 300
  selector:
    matchLabels:
      app: healthcare-backend
  template:
    metadata:
      labels:
        app: healthcare-backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-org/healthcare-saas/backend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-backend-stable
  namespace: healthcare
spec:
  selector:
    app: healthcare-backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-backend-canary
  namespace: healthcare
spec:
  selector:
    app: healthcare-backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: healthcare
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    successCondition: result[0] >= 0.95
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          sum(rate(http_requests_total{service="{{args.service-name}}",status=~"2.."}[5m])) /
          sum(rate(http_requests_total{service="{{args.service-name}}"}[5m]))
  - name: error-rate
    successCondition: result[0] <= 0.05
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          sum(rate(http_requests_total{service="{{args.service-name}}",status=~"5.."}[5m])) /
          sum(rate(http_requests_total{service="{{args.service-name}}"}[5m]))
---
apiVersion: argoproj.io/v1alpha1
kind: Rollback
metadata:
  name: healthcare-backend-rollback
  namespace: healthcare
spec:
  rollout: healthcare-backend-rollout
  targetRevision: 1
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: automated-rollback-check
  namespace: healthcare
spec:
  schedule: "*/5 * * * *" # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: rollback-checker
            image: ghcr.io/your-org/healthcare-saas/rollback-checker:latest
            env:
            - name: PROMETHEUS_URL
              value: "http://prometheus:9090"
            - name: ROLLOUT_NAME
              value: "healthcare-backend-rollout"
            - name: ERROR_THRESHOLD
              value: "0.1" # 10% error rate threshold
            - name: LATENCY_THRESHOLD
              value: "2000" # 2 second latency threshold
            command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              echo "Checking deployment health..."
              
              # Check error rate
              ERROR_RATE=$(curl -s "$PROMETHEUS_URL/api/v1/query?query=sum(rate(http_requests_total{service=\"healthcare-backend\",status=~\"5..\"}[5m]))/sum(rate(http_requests_total{service=\"healthcare-backend\"}[5m]))" | jq -r '.data.result[0].value[1]')
              
              # Check latency
              LATENCY=$(curl -s "$PROMETHEUS_URL/api/v1/query?query=histogram_quantile(0.95,rate(http_request_duration_seconds_bucket{service=\"healthcare-backend\"}[5m]))" | jq -r '.data.result[0].value[1]')
              
              echo "Error rate: $ERROR_RATE, Latency: $LATENCY"
              
              # Trigger rollback if thresholds exceeded
              if (( $(echo "$ERROR_RATE > $ERROR_THRESHOLD" | bc -l) )) || (( $(echo "$LATENCY > $LATENCY_THRESHOLD" | bc -l) )); then
                echo "Health check failed, triggering rollback..."
                kubectl patch rollout $ROLLOUT_NAME -n healthcare --type='merge' -p='{"spec":{"paused":true}}'
                kubectl rollout undo rollout/$ROLLOUT_NAME -n healthcare
                echo "Rollback triggered"
              else
                echo "Health check passed"
              fi
          restartPolicy: OnFailure
